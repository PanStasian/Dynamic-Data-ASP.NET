#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Touristic")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Определения метода расширяемости
  partial void OnCreated();
  partial void InsertDeparture(Departure instance);
  partial void UpdateDeparture(Departure instance);
  partial void DeleteDeparture(Departure instance);
  partial void InsertDestination(Destination instance);
  partial void UpdateDestination(Destination instance);
  partial void DeleteDestination(Destination instance);
  partial void InsertRoutes(Routes instance);
  partial void UpdateRoutes(Routes instance);
  partial void DeleteRoutes(Routes instance);
  partial void InsertSights(Sights instance);
  partial void UpdateSights(Sights instance);
  partial void DeleteSights(Sights instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TouristicConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Departure> Departure
	{
		get
		{
			return this.GetTable<Departure>();
		}
	}
	
	public System.Data.Linq.Table<Destination> Destination
	{
		get
		{
			return this.GetTable<Destination>();
		}
	}
	
	public System.Data.Linq.Table<Routes> Routes
	{
		get
		{
			return this.GetTable<Routes>();
		}
	}
	
	public System.Data.Linq.Table<Sights> Sights
	{
		get
		{
			return this.GetTable<Sights>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departure")]
public partial class Departure : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _departutre_id;
	
	private string _departure_name;
	
	private EntitySet<Routes> _Routes;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondepartutre_idChanging(int value);
    partial void Ondepartutre_idChanged();
    partial void Ondeparture_nameChanging(string value);
    partial void Ondeparture_nameChanged();
    #endregion
	
	public Departure()
	{
		this._Routes = new EntitySet<Routes>(new Action<Routes>(this.attach_Routes), new Action<Routes>(this.detach_Routes));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departutre_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int departutre_id
	{
		get
		{
			return this._departutre_id;
		}
		set
		{
			if ((this._departutre_id != value))
			{
				this.Ondepartutre_idChanging(value);
				this.SendPropertyChanging();
				this._departutre_id = value;
				this.SendPropertyChanged("departutre_id");
				this.Ondepartutre_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departure_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string departure_name
	{
		get
		{
			return this._departure_name;
		}
		set
		{
			if ((this._departure_name != value))
			{
				this.Ondeparture_nameChanging(value);
				this.SendPropertyChanging();
				this._departure_name = value;
				this.SendPropertyChanged("departure_name");
				this.Ondeparture_nameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departure_Routes", Storage="_Routes", ThisKey="departutre_id", OtherKey="departure_id")]
	public EntitySet<Routes> Routes
	{
		get
		{
			return this._Routes;
		}
		set
		{
			this._Routes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Routes(Routes entity)
	{
		this.SendPropertyChanging();
		entity.Departure = this;
	}
	
	private void detach_Routes(Routes entity)
	{
		this.SendPropertyChanging();
		entity.Departure = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Destination")]
public partial class Destination : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _destination_id;
	
	private string _destination_name;
	
	private System.Nullable<int> _sights_id;
	
	private EntitySet<Routes> _Routes;
	
	private EntitySet<Sights> _Sights1;
	
	private EntityRef<Sights> _Sights;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondestination_idChanging(int value);
    partial void Ondestination_idChanged();
    partial void Ondestination_nameChanging(string value);
    partial void Ondestination_nameChanged();
    partial void Onsights_idChanging(System.Nullable<int> value);
    partial void Onsights_idChanged();
    #endregion
	
	public Destination()
	{
		this._Routes = new EntitySet<Routes>(new Action<Routes>(this.attach_Routes), new Action<Routes>(this.detach_Routes));
		this._Sights1 = new EntitySet<Sights>(new Action<Sights>(this.attach_Sights1), new Action<Sights>(this.detach_Sights1));
		this._Sights = default(EntityRef<Sights>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_destination_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int destination_id
	{
		get
		{
			return this._destination_id;
		}
		set
		{
			if ((this._destination_id != value))
			{
				this.Ondestination_idChanging(value);
				this.SendPropertyChanging();
				this._destination_id = value;
				this.SendPropertyChanged("destination_id");
				this.Ondestination_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_destination_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string destination_name
	{
		get
		{
			return this._destination_name;
		}
		set
		{
			if ((this._destination_name != value))
			{
				this.Ondestination_nameChanging(value);
				this.SendPropertyChanging();
				this._destination_name = value;
				this.SendPropertyChanged("destination_name");
				this.Ondestination_nameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sights_id", DbType="Int")]
	public System.Nullable<int> sights_id
	{
		get
		{
			return this._sights_id;
		}
		set
		{
			if ((this._sights_id != value))
			{
				if (this._Sights.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onsights_idChanging(value);
				this.SendPropertyChanging();
				this._sights_id = value;
				this.SendPropertyChanged("sights_id");
				this.Onsights_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_Routes", Storage="_Routes", ThisKey="destination_id", OtherKey="destination_id")]
	public EntitySet<Routes> Routes
	{
		get
		{
			return this._Routes;
		}
		set
		{
			this._Routes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_Sights", Storage="_Sights1", ThisKey="destination_id", OtherKey="city_id")]
	public EntitySet<Sights> Sights1
	{
		get
		{
			return this._Sights1;
		}
		set
		{
			this._Sights1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sights_Destination", Storage="_Sights", ThisKey="sights_id", OtherKey="sight_id", IsForeignKey=true)]
	public Sights Sights
	{
		get
		{
			return this._Sights.Entity;
		}
		set
		{
			Sights previousValue = this._Sights.Entity;
			if (((previousValue != value) 
						|| (this._Sights.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Sights.Entity = null;
					previousValue.Destination.Remove(this);
				}
				this._Sights.Entity = value;
				if ((value != null))
				{
					value.Destination.Add(this);
					this._sights_id = value.sight_id;
				}
				else
				{
					this._sights_id = default(Nullable<int>);
				}
				this.SendPropertyChanged("Sights");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Routes(Routes entity)
	{
		this.SendPropertyChanging();
		entity.Destination = this;
	}
	
	private void detach_Routes(Routes entity)
	{
		this.SendPropertyChanging();
		entity.Destination = null;
	}
	
	private void attach_Sights1(Sights entity)
	{
		this.SendPropertyChanging();
		entity.Destination1 = this;
	}
	
	private void detach_Sights1(Sights entity)
	{
		this.SendPropertyChanging();
		entity.Destination1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Routes")]
public partial class Routes : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _route_id;
	
	private string _route_name;
	
	private int _departure_id;
	
	private int _destination_id;
	
	private double _price;
	
	private System.Nullable<int> _sights_id;
	
	private double _flight;
	
	private EntityRef<Departure> _Departure;
	
	private EntityRef<Destination> _Destination;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onroute_idChanging(int value);
    partial void Onroute_idChanged();
    partial void Onroute_nameChanging(string value);
    partial void Onroute_nameChanged();
    partial void Ondeparture_idChanging(int value);
    partial void Ondeparture_idChanged();
    partial void Ondestination_idChanging(int value);
    partial void Ondestination_idChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void Onsights_idChanging(System.Nullable<int> value);
    partial void Onsights_idChanged();
    partial void OnflightChanging(double value);
    partial void OnflightChanged();
    #endregion
	
	public Routes()
	{
		this._Departure = default(EntityRef<Departure>);
		this._Destination = default(EntityRef<Destination>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_route_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int route_id
	{
		get
		{
			return this._route_id;
		}
		set
		{
			if ((this._route_id != value))
			{
				this.Onroute_idChanging(value);
				this.SendPropertyChanging();
				this._route_id = value;
				this.SendPropertyChanged("route_id");
				this.Onroute_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_route_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string route_name
	{
		get
		{
			return this._route_name;
		}
		set
		{
			if ((this._route_name != value))
			{
				this.Onroute_nameChanging(value);
				this.SendPropertyChanging();
				this._route_name = value;
				this.SendPropertyChanged("route_name");
				this.Onroute_nameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departure_id", DbType="Int NOT NULL")]
	public int departure_id
	{
		get
		{
			return this._departure_id;
		}
		set
		{
			if ((this._departure_id != value))
			{
				if (this._Departure.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ondeparture_idChanging(value);
				this.SendPropertyChanging();
				this._departure_id = value;
				this.SendPropertyChanged("departure_id");
				this.Ondeparture_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_destination_id", DbType="Int NOT NULL")]
	public int destination_id
	{
		get
		{
			return this._destination_id;
		}
		set
		{
			if ((this._destination_id != value))
			{
				if (this._Destination.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ondestination_idChanging(value);
				this.SendPropertyChanging();
				this._destination_id = value;
				this.SendPropertyChanged("destination_id");
				this.Ondestination_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
	public double price
	{
		get
		{
			return this._price;
		}
		set
		{
			if ((this._price != value))
			{
				this.OnpriceChanging(value);
				this.SendPropertyChanging();
				this._price = value;
				this.SendPropertyChanged("price");
				this.OnpriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sights_id", DbType="Int")]
	public System.Nullable<int> sights_id
	{
		get
		{
			return this._sights_id;
		}
		set
		{
			if ((this._sights_id != value))
			{
				this.Onsights_idChanging(value);
				this.SendPropertyChanging();
				this._sights_id = value;
				this.SendPropertyChanged("sights_id");
				this.Onsights_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_flight", DbType="Float NOT NULL")]
	public double flight
	{
		get
		{
			return this._flight;
		}
		set
		{
			if ((this._flight != value))
			{
				this.OnflightChanging(value);
				this.SendPropertyChanging();
				this._flight = value;
				this.SendPropertyChanged("flight");
				this.OnflightChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departure_Routes", Storage="_Departure", ThisKey="departure_id", OtherKey="departutre_id", IsForeignKey=true)]
	public Departure Departure
	{
		get
		{
			return this._Departure.Entity;
		}
		set
		{
			Departure previousValue = this._Departure.Entity;
			if (((previousValue != value) 
						|| (this._Departure.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Departure.Entity = null;
					previousValue.Routes.Remove(this);
				}
				this._Departure.Entity = value;
				if ((value != null))
				{
					value.Routes.Add(this);
					this._departure_id = value.departutre_id;
				}
				else
				{
					this._departure_id = default(int);
				}
				this.SendPropertyChanged("Departure");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_Routes", Storage="_Destination", ThisKey="destination_id", OtherKey="destination_id", IsForeignKey=true)]
	public Destination Destination
	{
		get
		{
			return this._Destination.Entity;
		}
		set
		{
			Destination previousValue = this._Destination.Entity;
			if (((previousValue != value) 
						|| (this._Destination.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Destination.Entity = null;
					previousValue.Routes.Remove(this);
				}
				this._Destination.Entity = value;
				if ((value != null))
				{
					value.Routes.Add(this);
					this._destination_id = value.destination_id;
				}
				else
				{
					this._destination_id = default(int);
				}
				this.SendPropertyChanged("Destination");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sights")]
public partial class Sights : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _sight_id;
	
	private string _sight_name;
	
	private int _city_id;
	
	private int _rating;
	
	private EntitySet<Destination> _Destination;
	
	private EntityRef<Destination> _Destination1;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsight_idChanging(int value);
    partial void Onsight_idChanged();
    partial void Onsight_nameChanging(string value);
    partial void Onsight_nameChanged();
    partial void Oncity_idChanging(int value);
    partial void Oncity_idChanged();
    partial void OnratingChanging(int value);
    partial void OnratingChanged();
    #endregion
	
	public Sights()
	{
		this._Destination = new EntitySet<Destination>(new Action<Destination>(this.attach_Destination), new Action<Destination>(this.detach_Destination));
		this._Destination1 = default(EntityRef<Destination>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sight_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int sight_id
	{
		get
		{
			return this._sight_id;
		}
		set
		{
			if ((this._sight_id != value))
			{
				this.Onsight_idChanging(value);
				this.SendPropertyChanging();
				this._sight_id = value;
				this.SendPropertyChanged("sight_id");
				this.Onsight_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sight_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string sight_name
	{
		get
		{
			return this._sight_name;
		}
		set
		{
			if ((this._sight_name != value))
			{
				this.Onsight_nameChanging(value);
				this.SendPropertyChanging();
				this._sight_name = value;
				this.SendPropertyChanged("sight_name");
				this.Onsight_nameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city_id", DbType="Int NOT NULL")]
	public int city_id
	{
		get
		{
			return this._city_id;
		}
		set
		{
			if ((this._city_id != value))
			{
				if (this._Destination1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Oncity_idChanging(value);
				this.SendPropertyChanging();
				this._city_id = value;
				this.SendPropertyChanged("city_id");
				this.Oncity_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rating", DbType="Int NOT NULL")]
	public int rating
	{
		get
		{
			return this._rating;
		}
		set
		{
			if ((this._rating != value))
			{
				this.OnratingChanging(value);
				this.SendPropertyChanging();
				this._rating = value;
				this.SendPropertyChanged("rating");
				this.OnratingChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sights_Destination", Storage="_Destination", ThisKey="sight_id", OtherKey="sights_id")]
	public EntitySet<Destination> Destination
	{
		get
		{
			return this._Destination;
		}
		set
		{
			this._Destination.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_Sights", Storage="_Destination1", ThisKey="city_id", OtherKey="destination_id", IsForeignKey=true)]
	public Destination Destination1
	{
		get
		{
			return this._Destination1.Entity;
		}
		set
		{
			Destination previousValue = this._Destination1.Entity;
			if (((previousValue != value) 
						|| (this._Destination1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Destination1.Entity = null;
					previousValue.Sights1.Remove(this);
				}
				this._Destination1.Entity = value;
				if ((value != null))
				{
					value.Sights1.Add(this);
					this._city_id = value.destination_id;
				}
				else
				{
					this._city_id = default(int);
				}
				this.SendPropertyChanged("Destination1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Destination(Destination entity)
	{
		this.SendPropertyChanging();
		entity.Sights = this;
	}
	
	private void detach_Destination(Destination entity)
	{
		this.SendPropertyChanging();
		entity.Sights = null;
	}
}
#pragma warning restore 1591
